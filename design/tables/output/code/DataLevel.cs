// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataLevel.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Gear.Packer {

  /// <summary>Holder for reflection information generated from DataLevel.proto</summary>
  public static partial class DataLevelReflection {

    #region Descriptor
    /// <summary>File descriptor for DataLevel.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataLevelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9EYXRhTGV2ZWwucHJvdG8SD2NvbS5nZWFyLnBhY2tlciJyCglEYXRhTGV2",
            "ZWwSCgoCaWQYASABKAUSDQoFc2NvcmUYAiABKAUSEgoKcm9hZExlbmd0aBgD",
            "IAEoBRIPCgdvYmplY3RzGAQgASgJEhEKCXRvb2xDbGVhbhgFIAEoBRISCgp0",
            "b29sRG91YmxlGAYgASgFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Gear.Packer.DataLevel), global::Com.Gear.Packer.DataLevel.Parser, new[]{ "Id", "Score", "RoadLength", "Objects", "ToolClean", "ToolDouble" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DataLevel : pb::IMessage<DataLevel> {
    private static readonly pb::MessageParser<DataLevel> _parser = new pb::MessageParser<DataLevel>(() => new DataLevel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataLevel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Gear.Packer.DataLevelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataLevel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataLevel(DataLevel other) : this() {
      id_ = other.id_;
      score_ = other.score_;
      roadLength_ = other.roadLength_;
      objects_ = other.objects_;
      toolClean_ = other.toolClean_;
      toolDouble_ = other.toolDouble_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataLevel Clone() {
      return new DataLevel(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///唯一标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private int score_;
    /// <summary>
    ///过关奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "roadLength" field.</summary>
    public const int RoadLengthFieldNumber = 3;
    private int roadLength_;
    /// <summary>
    ///道路长度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoadLength {
      get { return roadLength_; }
      set {
        roadLength_ = value;
      }
    }

    /// <summary>Field number for the "objects" field.</summary>
    public const int ObjectsFieldNumber = 4;
    private string objects_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Objects {
      get { return objects_; }
      set {
        objects_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "toolClean" field.</summary>
    public const int ToolCleanFieldNumber = 5;
    private int toolClean_;
    /// <summary>
    ///初始清理次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToolClean {
      get { return toolClean_; }
      set {
        toolClean_ = value;
      }
    }

    /// <summary>Field number for the "toolDouble" field.</summary>
    public const int ToolDoubleFieldNumber = 6;
    private int toolDouble_;
    /// <summary>
    ///初始加倍次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToolDouble {
      get { return toolDouble_; }
      set {
        toolDouble_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataLevel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataLevel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Score != other.Score) return false;
      if (RoadLength != other.RoadLength) return false;
      if (Objects != other.Objects) return false;
      if (ToolClean != other.ToolClean) return false;
      if (ToolDouble != other.ToolDouble) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (RoadLength != 0) hash ^= RoadLength.GetHashCode();
      if (Objects.Length != 0) hash ^= Objects.GetHashCode();
      if (ToolClean != 0) hash ^= ToolClean.GetHashCode();
      if (ToolDouble != 0) hash ^= ToolDouble.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Score != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Score);
      }
      if (RoadLength != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RoadLength);
      }
      if (Objects.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Objects);
      }
      if (ToolClean != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ToolClean);
      }
      if (ToolDouble != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ToolDouble);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (RoadLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoadLength);
      }
      if (Objects.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Objects);
      }
      if (ToolClean != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToolClean);
      }
      if (ToolDouble != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToolDouble);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataLevel other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.RoadLength != 0) {
        RoadLength = other.RoadLength;
      }
      if (other.Objects.Length != 0) {
        Objects = other.Objects;
      }
      if (other.ToolClean != 0) {
        ToolClean = other.ToolClean;
      }
      if (other.ToolDouble != 0) {
        ToolDouble = other.ToolDouble;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Score = input.ReadInt32();
            break;
          }
          case 24: {
            RoadLength = input.ReadInt32();
            break;
          }
          case 34: {
            Objects = input.ReadString();
            break;
          }
          case 40: {
            ToolClean = input.ReadInt32();
            break;
          }
          case 48: {
            ToolDouble = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
